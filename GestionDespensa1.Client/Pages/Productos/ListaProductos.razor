@page "/productos"
@using GestionDespensa1.Shared.DTO
@using GestionDespensa1.Client.Servicios.Entidades
@inject IProductoService ProductoService
@inject ICategoriaService CategoriaService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Productos - GestionDespensa</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="fas fa-box me-2"></i>Lista de Productos</h3>
    <div>
        <button class="btn btn-primary me-2" @onclick="NuevoProducto">
            <i class="fas fa-plus me-1"></i> Nuevo Producto
        </button>
        <button class="btn btn-outline-warning" @onclick="VerStockBajo" title="Ver productos con stock bajo">
            <i class="fas fa-exclamation-triangle me-1"></i> Stock Bajo
        </button>
    </div>
</div>

@if (cargando)
{
    <div class="alert alert-info text-center">
        <i class="fas fa-spinner fa-spin me-2"></i>Cargando productos...
    </div>
}
else if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle me-2"></i>@mensajeError
    </div>
}
else if (!productos.Any())
{
    <div class="alert alert-warning text-center">
        <i class="fas fa-box-open me-2"></i>No hay productos registrados
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Descripción</th>
                            <th>Precio</th>
                            <th>% Ganancia</th>
                            <th>Stock</th>
                            <th>Stock Mínimo</th>
                            <th>Categoría</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in productos)
                        {
                            <tr class="@(producto.StockActual <= producto.StockMinimo ? "table-warning" : "")">
                                <td class="fw-bold">#@producto.Id</td>
                                <td>@producto.Descripcion</td>
                                <td class="text-success fw-bold">@producto.PrecioUnitario.ToString("C")</td>
                                <td>@producto.GananciaPorcentaje.ToString("F1")%</td>
                                <td>
                                    <span class="badge @(producto.StockActual <= producto.StockMinimo ? "bg-danger" : "bg-success")">
                                        @producto.StockActual
                                    </span>
                                </td>
                                <td>@producto.StockMinimo</td>
                                <td>
                                    <span class="badge bg-secondary">@ObtenerNombreCategoria(producto.IdCategoria)</span>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProducto(producto.Id)"
                                            title="Editar producto">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)"
                                            title="Eliminar producto">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductoDTO> productos = new();
    private List<CategoriaDTO> categorias = new();
    private bool cargando = true;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        await CargarCategorias();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await ProductoService.Get();

        if (respuesta.Error)
        {
            mensajeError = await respuesta.ObtenerError();
        }
        else
        {
            productos = respuesta.Respuesta ?? new List<ProductoDTO>();
        }

        cargando = false;
        StateHasChanged();
    }

    private async Task CargarCategorias()
    {
        var respuesta = await CategoriaService.Get();
        if (!respuesta.Error)
        {
            categorias = respuesta.Respuesta ?? new List<CategoriaDTO>();
        }
    }

    private string ObtenerNombreCategoria(int idCategoria)
    {
        return categorias.FirstOrDefault(c => c.Id == idCategoria)?.NombreCategoria ?? "Sin categoría";
    }

    private void NuevoProducto() => Navigation.NavigateTo("/productos/nuevo");
    private void EditarProducto(int id) => Navigation.NavigateTo($"/productos/editar/{id}");

    private async Task VerStockBajo()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await ProductoService.GetStockBajo();
        if (!respuesta.Error)
        {
            productos = respuesta.Respuesta ?? new List<ProductoDTO>();
        }
        else
        {
            mensajeError = await respuesta.ObtenerError();
        }

        cargando = false;
        StateHasChanged();
    }

    private async Task EliminarProducto(int id)
    {
        var producto = productos.FirstOrDefault(p => p.Id == id);
        if (producto == null) return;

        var confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar el producto '{producto.Descripcion}'?");

        if (confirmado)
        {
            var respuesta = await ProductoService.Delete(id);
            if (!respuesta.Error)
            {
                await CargarProductos();
                await JS.InvokeVoidAsync("alert", "✅ Producto eliminado exitosamente");
            }
            else
            {
                mensajeError = await respuesta.ObtenerError();
            }
        }
    }
}
