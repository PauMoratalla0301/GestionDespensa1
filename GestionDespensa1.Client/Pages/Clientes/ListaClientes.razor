@page "/clientes"
@using GestionDespensa1.Shared.DTO
@using GestionDespensa1.Client.Servicios.Entidades
@inject IClienteService ClienteService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Clientes - GestionDespensa</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="fas fa-users me-2"></i>Lista de Clientes</h3>
    <button class="btn btn-primary" @onclick="NuevoCliente">
        <i class="fas fa-plus me-1"></i> Nuevo Cliente
    </button>
</div>

@if (cargando)
{
    <div class="alert alert-info text-center">
        <i class="fas fa-spinner fa-spin me-2"></i>Cargando clientes...
    </div>
}
else if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle me-2"></i>@mensajeError
    </div>
}
else if (!clientes.Any())
{
    <div class="alert alert-warning text-center">
        <i class="fas fa-users me-2"></i>No hay clientes registrados
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>DNI</th>
                            <th>Teléfono</th>
                            <th>Dirección</th>
                            <th>Saldo Pendiente</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cliente in clientes)
                        {
                            <tr>
                                <td class="fw-bold">#@cliente.Id</td>
                                <td>@cliente.Nombre</td>
                                <td>@cliente.Apellido</td>
                                <td>@cliente.Dni</td>
                                <td>@cliente.Telefono</td>
                                <td>@cliente.Direccion</td>
                                <td>
                                    <span class="badge @(cliente.SaldoPendiente > 0 ? "bg-danger" : "bg-success")">
                                        @cliente.SaldoPendiente.ToString("C")
                                    </span>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarCliente(cliente.Id)"
                                            title="Editar cliente">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarCliente(cliente.Id)"
                                            title="Eliminar cliente">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private List<ClienteDTO> clientes = new();
    private bool cargando = true;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    private async Task CargarClientes()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await ClienteService.Get();

        if (respuesta.Error)
        {
            mensajeError = await respuesta.ObtenerError();
        }
        else
        {
            clientes = respuesta.Respuesta ?? new List<ClienteDTO>();
        }

        cargando = false;
        StateHasChanged();
    }

    private void NuevoCliente() => Navigation.NavigateTo("/clientes/nuevo");
    private void EditarCliente(int id) => Navigation.NavigateTo($"/clientes/editar/{id}");

    private async Task EliminarCliente(int id)
    {
        var cliente = clientes.FirstOrDefault(c => c.Id == id);
        if (cliente == null) return;

        var confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar al cliente '{cliente.Nombre} {cliente.Apellido}'?");

        if (confirmado)
        {
            var respuesta = await ClienteService.Delete(id);
            if (!respuesta.Error)
            {
                await CargarClientes();
                await JS.InvokeVoidAsync("alert", "✅ Cliente eliminado exitosamente");
            }
            else
            {
                mensajeError = await respuesta.ObtenerError();
            }
        }
    }
}
