@page "/ventas"
@using GestionDespensa1.Shared.DTO
@using GestionDespensa1.Client.Servicios.Entidades
@inject IVentaService VentaService
@inject IClienteService ClienteService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Ventas - GestionDespensa</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="fas fa-shopping-cart me-2"></i>Lista de Ventas</h3>
    <div>
        <button class="btn btn-primary me-2" @onclick="NuevaVenta">
            <i class="fas fa-plus me-1"></i> Nueva Venta
        </button>
        <button class="btn btn-outline-warning" @onclick="VerConSaldoPendiente" title="Ver ventas con saldo pendiente">
            <i class="fas fa-clock me-1"></i> Pendientes
        </button>
    </div>
</div>

@if (cargando)
{
    <div class="alert alert-info text-center">
        <i class="fas fa-spinner fa-spin me-2"></i>Cargando ventas...
    </div>
}
else if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle me-2"></i>@mensajeError
    </div>
}
else if (!ventas.Any())
{
    <div class="alert alert-warning text-center">
        <i class="fas fa-shopping-cart me-2"></i>No hay ventas registradas
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Fecha</th>
                            <th>Cliente</th>
                            <th>Total</th>
                            <th>Pagado</th>
                            <th>Saldo</th>
                            <th>Estado</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var venta in ventas)
                        {
                            <tr class="@(venta.SaldoPendiente > 0 ? "table-warning" : "")">
                                <td class="fw-bold">#@venta.Id</td>
                                <td>@venta.FechaVenta.ToString("dd/MM/yyyy")</td>
                                <td>@ObtenerNombreCliente(venta.IdCliente)</td>
                                <td class="text-success fw-bold">@venta.Total.ToString("C")</td>
                                <td>@venta.MontoPagado.ToString("C")</td>
                                <td>
                                    <span class="badge @(venta.SaldoPendiente > 0 ? "bg-danger" : "bg-success")">
                                        @venta.SaldoPendiente.ToString("C")
                                    </span>
                                </td>
                                <td>
                                    <span class="badge @(venta.Estado == "Pagado" ? "bg-success" : "bg-warning")">
                                        @venta.Estado
                                    </span>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-info me-1" @onclick="() => VerDetalles(venta.Id)"
                                            title="Ver detalles">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarVenta(venta.Id)"
                                            title="Editar venta">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarVenta(venta.Id)"
                                            title="Eliminar venta">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private List<VentaDTO> ventas = new();
    private List<ClienteDTO> clientes = new();
    private bool cargando = true;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarVentas();
        await CargarClientes();
    }

    private async Task CargarVentas()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await VentaService.Get();

        if (respuesta.Error)
        {
            mensajeError = await respuesta.ObtenerError();
        }
        else
        {
            ventas = respuesta.Respuesta ?? new List<VentaDTO>();
        }

        cargando = false;
        StateHasChanged();
    }

    private async Task CargarClientes()
    {
        var respuesta = await ClienteService.Get();
        if (!respuesta.Error)
        {
            clientes = respuesta.Respuesta ?? new List<ClienteDTO>();
        }
    }

    private string ObtenerNombreCliente(int idCliente)
    {
        var cliente = clientes.FirstOrDefault(c => c.Id == idCliente);
        return cliente != null ? $"{cliente.Nombre} {cliente.Apellido}" : "Cliente no encontrado";
    }

    private void NuevaVenta() => Navigation.NavigateTo("/ventas/nuevo");
    private void EditarVenta(int id) => Navigation.NavigateTo($"/ventas/editar/{id}");
    private void VerDetalles(int id) => Navigation.NavigateTo($"/ventas/detalles/{id}");

    private async Task VerConSaldoPendiente()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await VentaService.GetConSaldoPendiente();
        if (!respuesta.Error)
        {
            ventas = respuesta.Respuesta ?? new List<VentaDTO>();
        }
        else
        {
            mensajeError = await respuesta.ObtenerError();
        }

        cargando = false;
        StateHasChanged();
    }

    private async Task EliminarVenta(int id)
    {
        var venta = ventas.FirstOrDefault(v => v.Id == id);
        if (venta == null) return;

        var confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar la venta #{venta.Id}?\n\nEsta acción no se puede deshacer.");

        if (confirmado)
        {
            var respuesta = await VentaService.Delete(id);
            if (!respuesta.Error)
            {
                await CargarVentas();
                await JS.InvokeVoidAsync("alert", "✅ Venta eliminada exitosamente");
            }
            else
            {
                mensajeError = await respuesta.ObtenerError();
            }
        }
    }
}
