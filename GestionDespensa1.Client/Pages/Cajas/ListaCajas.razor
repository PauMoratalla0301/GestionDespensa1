@page "/cajas"
@using GestionDespensa1.Shared.DTO
@using GestionDespensa1.Client.Servicios.Entidades
@inject ICajaService CajaService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Cajas - GestionDespensa</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="fas fa-cash-register me-2"></i>Registro de Cajas</h3>
    <button class="btn btn-primary" @onclick="NuevaCaja">
        <i class="fas fa-plus me-1"></i> Nueva Caja
    </button>
</div>

@if (cargando)
{
    <div class="alert alert-info text-center">
        <i class="fas fa-spinner fa-spin me-2"></i>Cargando cajas...
    </div>
}
else if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle me-2"></i>@mensajeError
    </div>
}
else if (!cajas.Any())
{
    <div class="alert alert-warning text-center">
        <i class="fas fa-cash-register me-2"></i>No hay cajas registradas
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Usuario</th>
                            <th>Fecha</th>
                            <th>Importe Inicio</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var caja in cajas)
                        {
                            <tr>
                                <td class="fw-bold">#@caja.Id</td>
                                <td>@caja.IdUsuario</td>
                                <td>@caja.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                                <td class="text-success fw-bold">@caja.ImporteInicio.ToString("C")</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-info me-1" @onclick="() => VerDetalles(caja.Id)"
                                            title="Ver detalles">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarCaja(caja.Id)"
                                            title="Editar caja">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarCaja(caja.Id)"
                                            title="Eliminar caja">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private List<CajaDTO> cajas = new();
    private bool cargando = true;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarCajas();
    }

    private async Task CargarCajas()
    {
        cargando = true;
        StateHasChanged();

        var respuesta = await CajaService.Get();

        if (respuesta.Error)
        {
            mensajeError = await respuesta.ObtenerError();
        }
        else
        {
            cajas = respuesta.Respuesta ?? new List<CajaDTO>();
        }

        cargando = false;
        StateHasChanged();
    }

    private void NuevaCaja() => Navigation.NavigateTo("/cajas/nuevo");
    private void EditarCaja(int id) => Navigation.NavigateTo($"/cajas/editar/{id}");
    private void VerDetalles(int id) => Navigation.NavigateTo($"/cajas/detalles/{id}");

    private async Task EliminarCaja(int id)
    {
        var caja = cajas.FirstOrDefault(c => c.Id == id);
        if (caja == null) return;

        var confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar la caja #{caja.Id} del usuario {caja.IdUsuario}?\n\nEsta acción no se puede deshacer.");

        if (confirmado)
        {
            var respuesta = await CajaService.Delete(id);
            if (!respuesta.Error)
            {
                await CargarCajas();
                await JS.InvokeVoidAsync("alert", "✅ Caja eliminada exitosamente");
            }
            else
            {
                mensajeError = await respuesta.ObtenerError();
            }
        }
    }
}
